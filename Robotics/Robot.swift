//
//  Robot.swift
//  IK2D
//
//  Created by Erk EKİN on 18/12/15.
//  Copyright © 2015 ekin. All rights reserved.
//


import UIKit

class Robot{

    let circlepoints:[(Float,Float)] = [ (526.518920898438, 309.1884765625), (526.518920898438, 309.1884765625), (518.215087890625, 308.046447753906), (517.405883789062, 307.984558105469), (516.866088867188, 307.948120117188), (516.326049804688, 307.915466308594), (515.245300292969, 307.861694335938), (514.704650878906, 307.840637207031), (514.163879394531, 307.823364257812), (513.08203125, 307.80029296875), (512.541015625, 307.794555664062), (510.376983642578, 307.809875488281), (509.295349121094, 307.840576171875), (508.214233398438, 307.886657714844), (507.133880615234, 307.948120117188), (506.054534912109, 308.02490234375), (503.899658203125, 308.224365234375), (502.824523925781, 308.346984863281), (502.287658691406, 308.4140625), (501.215393066406, 308.5595703125), (498.012573242188, 309.087280273438), (496.950317382812, 309.29345703125), (495.891052246094, 309.5146484375), (494.835083007812, 309.750854492188), (491.688781738281, 310.549194335938), (490.129089355469, 310.998413085938), (488.322021484375, 311.564392089844), (486.274780273438, 312.265930175781), (484.248260498047, 313.025268554688), (479.283447265625, 315.172729492188), (476.861328125, 316.377258300781), (474.013488769531, 317.934936523438), (470.324462890625, 320.197814941406), (465.903533935547, 323.314880371094), (461.918395996094, 326.5595703125), (457.969970703125, 330.256896972656), (453.5927734375, 335.049377441406), (449.639282226562, 340.196960449219), (446.411987304688, 345.195678710938), (444.439636230469, 348.741333007812), (442.547119140625, 352.633422851562), (441.477630615234, 355.118103027344), (440.685974121094, 357.132202148438), (440.129913330078, 358.657104492188), (438.513275146484, 363.819213867188), (437.720520019531, 366.966918945312), (437.162780761719, 369.613891601562), (436.466796875, 373.885314941406), (436.238830566406, 375.765197753906), (435.994293212891, 378.459167480469), (435.867584228516, 380.619567871094), (435.802307128906, 382.78271484375), (435.798431396484, 384.94677734375), (435.856140136719, 387.110168457031), (435.975128173828, 389.27099609375), (436.330810546875, 393.041137695312), (436.54052734375, 394.650695800781), (436.699371337891, 395.721008300781), (437.601440429688, 400.505310058594), (438.234161376953, 403.135375976562), (439.037353515625, 406.00048828125), (440.040466308594, 409.087646484375), (442.001342773438, 414.129028320312), (442.885070800781, 416.104431152344), (444.314910888672, 419.018615722656), (446.411926269531, 422.804382324219), (448.720520019531, 426.465026855469), (450.586303710938, 429.121215820312), (453.41943359375, 432.742980957031), (454.827056884766, 434.38671875), (456.280822753906, 435.989807128906), (457.779541015625, 437.550964355469), (459.321929931641, 439.068969726562), (462.122680664062, 441.617858886719), (463.778839111328, 443.010925292969), (467.206420898438, 445.653076171875), (468.529602050781, 446.593078613281), (472.152984619141, 448.959777832031), (473.54541015625, 449.793762207031), (475.192016601562, 450.728881835938), (478.552429199219, 452.474975585938), (480.018249511719, 453.171813964844), (481.995300292969, 454.052062988281), (484.500427246094, 455.07275390625), (491.167785644531, 457.304809570312), (495.362670898438, 458.369140625), (499.07763671875, 459.103820800781), (506.324279785156, 459.995788574219), (508.484466552734, 460.126281738281), (510.6474609375, 460.195434570312), (512.8115234375, 460.203125), (514.974975585938, 460.149291992188), (517.136047363281, 460.034118652344), (519.831298828125, 459.803955078125), (524.121826171875, 459.237182617188), (526.253295898438, 458.862670898438), (527.844421386719, 458.542053222656), (528.901245117188, 458.3095703125), (531.266296386719, 457.731811523438), (533.352111816406, 457.155029296875), (535.420715332031, 456.519226074219), (537.470458984375, 455.825012207031), (539.499633789062, 455.07275390625), (541.506591796875, 454.263244628906), (543.489807128906, 453.397033691406), (545.447631835938, 452.474914550781), (546.41650390625, 451.993103027344), (547.378479003906, 451.497619628906), (548.807983398438, 450.728820800781), (550.687866210938, 449.656799316406), (552.53662109375, 448.531860351562), (553.901794433594, 447.653869628906), (554.801330566406, 447.052429199219), (558.096496582031, 444.685119628906), (559.801025390625, 443.351745605469), (561.467041015625, 441.970520019531), (564.678039550781, 439.068969726562), (566.220458984375, 437.550964355469), (567.719177246094, 435.989807128906), (569.882629394531, 433.56982421875), (570.925231933594, 432.325866699219), (571.60546875, 431.484313964844), (572.9296875, 429.772705078125), (574.823669433594, 427.136474609375), (577.310852050781, 423.26904296875), (578.399597167969, 421.398681640625), (579.68505859375, 419.0185546875), (580.175476074219, 418.053955078125), (581.998657226562, 414.128967285156), (582.825927734375, 412.129272460938), (583.596069335938, 410.106811523438), (584.135864257812, 408.576110839844), (584.804626464844, 406.517944335938), (585.414672851562, 404.441528320312), (585.965454101562, 402.348754882812), (586.339477539062, 400.769287109375), (586.570068359375, 399.712036132812), (586.887817382812, 398.120361328125), (587.215515136719, 396.255310058594), (587.45947265625, 394.650634765625), (587.7314453125, 392.503662109375), (587.985534667969, 389.810546875), (588.119873046875, 387.650634765625), (588.1640625, 386.569458007812), (588.206298828125, 384.40576171875), (588.204406738281, 383.32373046875), (588.154479980469, 381.16015625), (588.043090820312, 378.998901367188), (587.919372558594, 377.380493164062), (587.568603515625, 374.153503417969), (587.258544921875, 372.01171875), (587.080749511719, 370.9443359375), (586.679748535156, 368.817749023438), (586.279479980469, 366.966857910156), (585.192810058594, 362.777770996094), (584.393493652344, 360.193481445312), (583.688232421875, 358.1474609375), (583.121459960938, 356.626586914062), (582.315551757812, 354.618103027344), (580.534240722656, 350.673950195312), (579.809020996094, 349.221862792969), (578.794067382812, 347.310485839844), (576.31494140625, 343.120361328125), (574.976379394531, 341.086791992188), (573.732421875, 339.31591796875), (572.766845703125, 338.011352539062), (571.436401367188, 336.304443359375), (570.4072265625, 335.049377441406), (567.5341796875, 331.812744140625), (566.41015625, 330.641784667969), (565.647033691406, 329.874694824219), (564.482116699219, 328.744384765625), (562.89208984375, 327.276489257812), (561.260925292969, 325.854248046875), (560.011474609375, 324.818237304688), (559.166259765625, 324.142578125), (558.311584472656, 323.478881835938), (556.574401855469, 322.188293457031), (555.247924804688, 321.252990722656), (554.5771484375, 320.796020507812), (553.675537109375, 320.197814941406), (552.765441894531, 319.612487792969), (551.847106933594, 319.040100097656), (549.986511230469, 317.934936523438), (549.044555664062, 317.402282714844), (548.095275878906, 316.882934570312), (545.690490722656, 315.644165039062), (544.716552734375, 315.172607421875), (543.243225097656, 314.491638183594), (542.253234863281, 314.054870605469), (541.755737304688, 313.841979980469), (540.255004882812, 313.224060058594), (539.2470703125, 312.830078125), (538.7412109375, 312.638305664062), (537.725158691406, 312.265991210938), (536.191650390625, 311.734313964844), (535.677917480469, 311.564453125), (534.130004882812, 311.076416015625), (533.611572265625, 310.921264648438), (532.571838378906, 310.621643066406), (532.050354003906, 310.4775390625), (531.00439453125, 310.200378417969), (530.479919433594, 310.067199707031), (529.691528320312, 309.874694824219), (529.164855957031, 309.750854492188), (528.373291015625, 309.572204589844), (527.844360351562, 309.4580078125), (527.049682617188, 309.293395996094), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188), (526.518920898438, 309.188354492188)]

    var baseArm:Arm!
    var view:RobotView
    var origin:(x:Float,y:Float) = (0,0)

    init(baseArm:Arm, view:RobotView){
        self.view = view

        self.baseArm = baseArm


    }

    func draw(){

        let dk = directKinematics
        let height = Float(view.frame.size.height)
        let point = CGPoint(

            x: CGFloat(dk.x + origin.x),
            y: CGFloat(height + dk.y - origin.y  ))

        let layer = view.drawPoint(point: point, color: UIColor.blue.cgColor)
        view.layer.addSublayer(layer)

    }
    subscript(i: Int) -> Arm {
        get {
            return  i == 0 ? baseArm : (baseArm.linkedArm)!
        }
        set {

        }
    }

    var directKinematics:(x:Float, y:Float){

        let L1 = baseArm.lenght
        let L2 = baseArm.linkedArm!.lenght
        let Q1 = baseArm.angle
        let Q2 = baseArm.linkedArm!.angle
        let cosB3 = cos(Q1)
        let cosB3B4 = cos(Q1 + Q2)
        let sinB3 = sin(Q1)
        let sinB3B4 = sin(Q1 + Q2)

        let x = (L1 * cosB3) + (L2 * cosB3B4)
        let y = (L1 * sinB3) + (L2 * sinB3B4)

        return (x,y)

    }

    func inverseKinematics(coordinate: (x:Float, y:Float)) -> (Q1:Float,Q2:Float){

        let L1 = (baseArm.lenght)
        let L2 = (baseArm.linkedArm!.lenght)
        let B14 = (powf(coordinate.x, 2) + powf(coordinate.y, 2)  - L1*L1 - L2*L2)
        let y = acosf(B14/(2*L1*L2))

        let x1 = (L2*sin(y)*coordinate.y) + ((L1 + L2*cos(y))*coordinate.x)
        let y2 = ((-1*L2*sin(y)*coordinate.x) + ((L1+L2*cos(y))*coordinate.y))
        let x = atan2f(y2,x1)

        if x.isNormal && y.isNormal {
            return (x,y)
        }else{
            return (self[0].angle * -1,self[1].angle * -1)
        }


    }

}

